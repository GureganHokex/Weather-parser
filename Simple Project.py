# –ü–∞—Ä—Å–µ—Ä –ø–æ–≥–æ–¥—ã - Weather Parser
# 06/09 - 2-3 –Ω–µ–¥–µ–ª–∏!

import requests
import json
from datetime import datetime
import time
import os

# NOTE: Core weather logic has been extracted to `weather_service.py` for reuse by web app.

class WeatherParser:
    def __init__(self, api_key=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ–≥–æ–¥—ã
        api_key - –∫–ª—é—á –¥–ª—è OpenWeatherMap API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.api_key = api_key
        self.base_url = "http://api.openweathermap.org/data/2.5/weather"
        
    def get_weather_by_city(self, city_name):
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
        """
        if not self.api_key:
            return self._get_weather_mock(city_name)
            
        params = {
            'q': city_name,
            'appid': self.api_key,
            'units': 'metric',
            'lang': 'ru'
        }
        
        try:
            response = requests.get(self.base_url, params=params)
            response.raise_for_status()
            data = response.json()
            return self._format_weather_data(data)
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def get_weather_by_coords(self, latitude, longitude, fallback_city=None):
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (—à–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞)
        """
        if not self.api_key:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞, –≤–µ—Ä–Ω–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω –≥–æ—Ä–æ–¥ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
            return self._get_weather_mock(fallback_city or "–í–∞—à –≥–æ—Ä–æ–¥")

        params = {
            'lat': latitude,
            'lon': longitude,
            'appid': self.api_key,
            'units': 'metric',
            'lang': 'ru'
        }

        try:
            response = requests.get(self.base_url, params=params)
            response.raise_for_status()
            data = response.json()
            return self._format_weather_data(data)
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {e}")
            return None
    
    def _get_weather_mock(self, city_name):
        """
        –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞)
        """
        mock_data = {
            'city': city_name,
            'temperature': 22,
            'description': '–Ø—Å–Ω–æ',
            'humidity': 65,
            'pressure': 1013,
            'wind_speed': 3.2,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        return mock_data
    
    def _format_weather_data(self, data):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
        """
        formatted = {
            'city': data['name'],
            'country': data['sys']['country'],
            'temperature': round(data['main']['temp']),
            'feels_like': round(data['main']['feels_like']),
            'description': data['weather'][0]['description'].title(),
            'humidity': data['main']['humidity'],
            'pressure': data['main']['pressure'],
            'wind_speed': data['wind']['speed'],
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        return formatted
    
    def display_weather(self, weather_data):
        """
        –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
        """
        if not weather_data:
            print(" –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
            return
            
        print("\n" + "="*50)
        title = weather_data['city'].upper()
        if 'country' in weather_data:
            title = f"{title}, {weather_data['country']}"
        print(f"  –ü–û–ì–û–î–ê –í {title}")
        print("="*50)
        print(f"  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temperature']}¬∞C")
        if 'feels_like' in weather_data:
            print(f" –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['feels_like']}¬∞C")
        print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {weather_data['description']}")
        print(f" –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%")
        print(f" –î–∞–≤–ª–µ–Ω–∏–µ: {weather_data['pressure']} –≥–ü–∞")
        print(f" –í–µ—Ç–µ—Ä: {weather_data['wind_speed']} –º/—Å")
        print(f" –í—Ä–µ–º—è: {weather_data['timestamp']}")
        print("="*50)


def get_location_by_ip():
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å ip-api.com
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å { city, lat, lon } –∏–ª–∏ None
    """
    try:
        resp = requests.get("http://ip-api.com/json/", timeout=5)
        resp.raise_for_status()
        data = resp.json()
        if data.get('status') == 'success':
            return {
                'city': data.get('city') or '–í–∞—à –≥–æ—Ä–æ–¥',
                'lat': data.get('lat'),
                'lon': data.get('lon')
            }
        else:
            print(" –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP")
            return None
    except requests.exceptions.RequestException:
        print(" –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")
        return None

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
    """
    print("  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞—Ä—Å–µ—Ä –ø–æ–≥–æ–¥—ã!")
    print("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ openweathermap.org")
    print()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∑–∞—Ç–µ–º —Å–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api_key = os.getenv('OPENWEATHER_API_KEY')
    if not api_key:
        use_key = input("–ï—Å—Ç—å API –∫–ª—é—á OpenWeather? (y/n): ").strip().lower()
        if use_key == 'y':
            api_key = input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á: ").strip() or None

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä (–±–µ–∑ API –∫–ª—é—á–∞ - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫-–¥–∞–Ω–Ω—ã–µ)
    parser = WeatherParser(api_key=api_key)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ")
        print("2. –ü–æ–≥–æ–¥–∞ –ø–æ –º–æ–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é (IP)")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == '1':
            city = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: ").strip()
            if city:
                print(f"\nüîç –ò—â–µ–º –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ {city}...")
                weather = parser.get_weather_by_city(city)
                parser.display_weather(weather)
            else:
                print(" –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
                
        elif choice == '2':
            print("\nüìç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP...")
            loc = get_location_by_ip()
            if loc and loc.get('lat') is not None and loc.get('lon') is not None:
                city = loc.get('city') or '–í–∞—à –≥–æ—Ä–æ–¥'
                print(f"–ù–∞–π–¥–µ–Ω–æ: {city} (lat: {loc['lat']}, lon: {loc['lon']})")
                print("\nüîç –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º...")
                weather = parser.get_weather_by_coords(loc['lat'], loc['lon'], fallback_city=city)
                parser.display_weather(weather)
            else:
                print(" –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –≥–æ—Ä–æ–¥–æ–º.")

        elif choice == '3':
            print(" –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print(" –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()